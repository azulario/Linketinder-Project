================================================================================
    GUIA: COMO SUBSTITUIR O C√ìDIGO ANTIGO NO GITHUB PELO NOVO REFATORADO
================================================================================

üìã SITUA√á√ÉO ATUAL:
------------------
‚Ä¢ Voc√™ tem um projeto antigo no GitHub (com backend antigo)
‚Ä¢ Voc√™ tem este projeto novo refatorado e simplificado
‚Ä¢ Quer substituir o c√≥digo antigo pelo novo no reposit√≥rio GitHub

================================================================================
OP√á√ÉO 1: INVERTER - C√ìDIGO ANTIGO VAI PARA BRANCH, NOVO VIRA MAIN ‚≠ê RECOMENDADO
================================================================================

Esta op√ß√£o move o c√≥digo antigo para um branch de backup e coloca o novo no main.
VANTAGEM: Preserva o c√≥digo antigo em um branch se precisar consultar depois!

PASSO 1: Ter a URL do reposit√≥rio GitHub antigo
------------------------------------------------
Exemplo: https://github.com/seu-usuario/LinkeTinder.git

PASSO 2: Clonar o reposit√≥rio antigo para fazer backup
-------------------------------------------------------
cd /Users/azulario/IdeaProjects
git clone https://github.com/seu-usuario/LinkeTinder.git LinkeTinder-temp

PASSO 3: Criar branch de backup com o c√≥digo antigo
----------------------------------------------------
cd LinkeTinder-temp
git checkout -b backup-codigo-antigo
git push origin backup-codigo-antigo

PASSO 4: Voltar para o projeto novo e adicionar remote
-------------------------------------------------------
cd /Users/azulario/IdeaProjects/LinkeTinder
git remote add origin https://github.com/seu-usuario/LinkeTinder.git

PASSO 5: Adicionar arquivos e fazer commit
-------------------------------------------
git add .
git commit -m "Refatora√ß√£o completa: projeto simplificado com integra√ß√£o JDBC"

PASSO 6: Push for√ßado para substituir o main
---------------------------------------------
git push -f origin master

PASSO 7: Limpar pasta tempor√°ria
---------------------------------
cd /Users/azulario/IdeaProjects
rm -rf LinkeTinder-temp

‚úÖ RESULTADO:
   ‚Ä¢ main/master ‚Üí C√≥digo novo refatorado
   ‚Ä¢ backup-codigo-antigo ‚Üí C√≥digo antigo preservado

================================================================================
OP√á√ÉO 2: SUBSTITUI√á√ÉO COMPLETA (SEM BACKUP DO C√ìDIGO ANTIGO)
================================================================================

Esta op√ß√£o apaga TODO o hist√≥rico antigo e come√ßa do zero com o c√≥digo novo.
Use quando a refatora√ß√£o foi t√£o grande que o hist√≥rico antigo n√£o importa mais.

PASSO 1: Ter a URL do reposit√≥rio GitHub antigo
------------------------------------------------
Exemplo: https://github.com/seu-usuario/LinkeTinder.git

PASSO 2: Adicionar o remote do GitHub no projeto novo
------------------------------------------------------
cd /Users/azulario/IdeaProjects/LinkeTinder
git remote add origin https://github.com/seu-usuario/LinkeTinder.git

PASSO 3: Adicionar todos os arquivos ao Git
--------------------------------------------
git add .
git commit -m "Refatora√ß√£o completa: projeto simplificado e com integra√ß√£o JDBC"

PASSO 4: Fazer push for√ßado (APAGA o c√≥digo antigo no GitHub)
--------------------------------------------------------------
git push -f origin master

‚ö†Ô∏è ATEN√á√ÉO: O flag -f (force) VAI APAGAR TODO O C√ìDIGO ANTIGO!
N√£o h√° como desfazer. Certifique-se que √© isso que voc√™ quer!

================================================================================
OP√á√ÉO 3: MANTER HIST√ìRICO (RECOMENDADO PARA PRESERVAR HIST√ìRICO)
================================================================================

Esta op√ß√£o mant√©m o hist√≥rico Git antigo e adiciona a refatora√ß√£o como novos commits.

PASSO 1: Clonar o reposit√≥rio antigo em outra pasta
----------------------------------------------------
cd /Users/azulario/IdeaProjects
git clone https://github.com/seu-usuario/LinkeTinder.git LinkeTinder-backup

PASSO 2: Copiar a pasta .git do projeto antigo para o novo
-----------------------------------------------------------
cp -r LinkeTinder-backup/.git LinkeTinder/.git

PASSO 3: Verificar mudan√ßas
----------------------------
cd LinkeTinder
git status
(Vai mostrar muitas mudan√ßas - √© normal!)

PASSO 4: Adicionar e commitar as mudan√ßas
------------------------------------------
git add .
git commit -m "Refatora√ß√£o completa: projeto simplificado e com integra√ß√£o JDBC"

PASSO 5: Fazer push normal
---------------------------
git push origin master

================================================================================
QUAL OP√á√ÉO ESCOLHER?
================================================================================

‚úÖ ESCOLHA OP√á√ÉO 1 SE:
   ‚Ä¢ A refatora√ß√£o foi t√£o grande que o c√≥digo antigo n√£o serve mais
   ‚Ä¢ Voc√™ n√£o precisa do hist√≥rico antigo
   ‚Ä¢ Quer come√ßar "limpo" sem bagun√ßa
   ‚Ä¢ √â um projeto pessoal/estudo

‚úÖ ESCOLHA OP√á√ÉO 2 SE:
   ‚Ä¢ Quer preservar o hist√≥rico de commits antigos
   ‚Ä¢ √â importante ver a evolu√ß√£o do projeto
   ‚Ä¢ Outras pessoas colaboram no projeto

‚úÖ ESCOLHA OP√á√ÉO 3 SE:
   ‚Ä¢ N√£o tem certeza ainda
   ‚Ä¢ Quer testar o c√≥digo novo antes de substituir
   ‚Ä¢ Quer comparar as duas vers√µes lado a lado no GitHub
   ‚Ä¢ Quer fazer code review antes de mergear

================================================================================
COMANDOS RESUMIDOS (OP√á√ÉO 1 - MAIS USADA)
================================================================================

# 1. Ir para o projeto novo
cd /Users/azulario/IdeaProjects/LinkeTinder

# 2. Adicionar remote (TROCAR pela sua URL real!)
git remote add origin https://github.com/seu-usuario/LinkeTinder.git

# 3. Verificar que n√£o tem commits pendentes
git status

# 4. Adicionar todos os arquivos (se tiver algo novo)
git add .
git commit -m "Refatora√ß√£o completa: projeto simplificado com JDBC"

# 5. Push for√ßado (APAGA c√≥digo antigo!)
git push -f origin master

================================================================================
DICAS IMPORTANTES
================================================================================

1. Fa√ßa backup local do c√≥digo antigo antes de fazer push -f

2. Avise colaboradores (se houver) antes de fazer push for√ßado

3. Atualize o README.md para refletir as mudan√ßas

4. Se errar, voc√™ pode recuperar do backup ou hist√≥rico do GitHub
   (v√° em Settings > Danger Zone > View deployment history)

5. Depois do push, verifique no GitHub se est√° tudo certo

================================================================================
D√öVIDAS COMUNS
================================================================================

P: E se eu quiser manter o c√≥digo antigo em outro lugar?
R: Crie um branch "backup-old-version" antes de fazer push:
   git branch backup-old-version
   git push origin backup-old-version

P: Como fazer backup do c√≥digo antigo?
R: Antes de fazer qualquer coisa:
   git clone https://github.com/seu-usuario/LinkeTinder.git backup-linketinder

P: E se der erro de "rejected" no push?
R: √â porque o GitHub est√° protegendo contra perda de dados.
   Use git push -f para for√ßar (tenha certeza!)

P: Posso testar antes de apagar o antigo?
R: Sim! Use a OP√á√ÉO 3 (criar branch novo) para testar primeiro.

================================================================================
